version: '3.8'

# n8n Backup Solution - Docker Compose Configuration
# Production-ready setup with PostgreSQL and automated backups

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: always
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      # n8n Core Configuration
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - NODE_ENV=${NODE_ENV:-production}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      
      # Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      
      # Authentication
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      
      # Features
      - N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED:-true}
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED:-false}
      - N8N_TELEMETRY_ENABLED=${N8N_TELEMETRY_ENABLED:-false}
      
      # Timezone
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-UTC}
      
      # Webhooks
      - WEBHOOK_URL=${WEBHOOK_URL:-https://localhost:5678}
      
      # Queue Health Check
      - QUEUE_HEALTH_CHECK_ACTIVE=${QUEUE_HEALTH_CHECK_ACTIVE:-true}
      
      # Security
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE:-true}
      - N8N_LOG_LEVEL=${LOG_LEVEL:-info}
      
      # Performance
      - N8N_MAX_EXECUTION_TIMEOUT=${N8N_MAX_EXECUTION_TIMEOUT:-3600}
      - N8N_EXECUTION_DATA_SAVE_ON_ERROR=${N8N_EXECUTION_DATA_SAVE_ON_ERROR:-all}
      - N8N_EXECUTION_DATA_SAVE_ON_SUCCESS=${N8N_EXECUTION_DATA_SAVE_ON_SUCCESS:-all}
      
    volumes:
      - n8n_data:/home/node/.n8n
      # SSL certificates (if using custom certificates)
      - ${SSL_CERT_PATH:-./localhost.pem}:/opt/custom-certificates/server.pem:ro
      - ${SSL_KEY_PATH:-./localhost-key.pem}:/opt/custom-certificates/server.key:ro
    depends_on:
      db:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\`${N8N_HOST:-localhost}\`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  db:
    image: postgres:16
    container_name: n8n-postgres
    restart: always
    environment:
      # PostgreSQL Configuration
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER:-n8n}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      
      # Performance Tuning
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Custom PostgreSQL configuration (optional)
      # - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      # - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      # Uncomment if you need direct database access
      # - "5432:5432"
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4

  # Optional: Redis for caching and queue management
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    restart: always
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - with-redis

  # Optional: Traefik reverse proxy for SSL termination
  traefik:
    image: traefik:v3.0
    container_name: n8n-traefik
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - n8n-network
    profiles:
      - with-traefik

  # Backup service (runs periodically)
  backup:
    image: postgres:16
    container_name: n8n-backup
    restart: "no"
    environment:
      - PGHOST=db
      - PGPORT=5432
      - PGUSER=${POSTGRES_USER:-n8n}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=${POSTGRES_DB:-n8n}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
      - n8n_data:/n8n-data:ro
    networks:
      - n8n-network
    depends_on:
      db:
        condition: service_healthy
    command: /scripts/backup-cron.sh
    profiles:
      - with-backup-service

volumes:
  n8n_data:
    name: n8n_data
  postgres_data:
    name: n8n_postgres_data
  redis_data:
    name: n8n_redis_data
  traefik_letsencrypt:
    name: n8n_traefik_letsencrypt

networks:
  n8n-network:
    name: n8n-network
    driver: bridge